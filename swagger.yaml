openapi: 3.0.3

info:
  title: Ooblets API
  description: |-
    An **UNOFFICIAL** Ooblets API.

    # Attribution

    The information used was based on the content of the
    [Ooblets Wiki](https://ooblets.fandom.com/wiki/Ooblets_Wiki) which is licensed
    under [CC BY-NC-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0).
  contact:
    email: staticsanches@gmail.com
  license:
    name: MIT
    url: https://github.com/staticsanches/ooblets_api/blob/main/LICENSE
  version: 0.0.1

externalDocs:
  description: Visit the Github Repository
  url: https://github.com/staticsanches/ooblets_api

servers:
  - url: https://staticsanches.github.io/ooblets_api/api/v1

tags:
  - name: ooblets
  - name: items
  - name: locations
  - name: moves

paths:
  /ooblets/all.json:
    get:
      tags:
        - ooblets
      summary: List all Ooblets in JSON
      description: >-
        Returns a list with the ids of all available Ooblets in JSON format
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OobletList"
  /ooblets/all.yaml:
    get:
      tags:
        - ooblets
      summary: List all Ooblets in YAML
      description: >-
        Returns a list with the ids of all available Ooblets in YAML format
      responses:
        "200":
          description: Successful operation
          content:
            text/x-yaml:
              schema:
                $ref: "#/components/schemas/OobletList"
  /ooblets/{id}/data.json:
    get:
      tags:
        - ooblets
      summary: Find Ooblet data by ID in JSON
      description: Returns a single Ooblet in JSON format
      parameters:
        - name: id
          in: path
          description: ID of the Ooblet to return
          required: true
          schema:
            $ref: "#/components/schemas/OobletID"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ooblet"
  /ooblets/{id}/data.yaml:
    get:
      tags:
        - ooblets
      summary: Find Ooblet data by ID in YAML
      description: Returns a single Ooblet in YAML format
      parameters:
        - name: id
          in: path
          description: ID of the Ooblet to return
          required: true
          schema:
            $ref: "#/components/schemas/OobletID"
      responses:
        "200":
          description: Successful operation
          content:
            text/x-yaml:
              schema:
                $ref: "#/components/schemas/Ooblet"
  /ooblets/{id}/common.png:
    get:
      tags:
        - ooblets
      summary: Find Ooblet common image by ID
      description: Returns a single Ooblet common PNG image
      parameters:
        - name: id
          in: path
          description: ID of the Ooblet to return
          required: true
          schema:
            $ref: "#/components/schemas/OobletID"
      responses:
        "200":
          description: Successful operation
          content:
            image/png:
              schema:
                type: string
                format: binary
  /ooblets/{id}/gleamy.png:
    get:
      tags:
        - ooblets
      summary: Find Ooblet gleamy image by ID
      description: Returns a gleamy Ooblet gleamy PNG image
      parameters:
        - name: id
          in: path
          description: ID of the Ooblet to return
          required: true
          schema:
            $ref: "#/components/schemas/OobletID"
      responses:
        "200":
          description: Successful operation
          content:
            image/png:
              schema:
                type: string
                format: binary
  /ooblets/{id}/unusual.png:
    get:
      tags:
        - ooblets
      summary: Find Ooblet unusual image by ID
      description: Returns an unusual Ooblet unusual PNG image
      parameters:
        - name: id
          in: path
          description: ID of the Ooblet to return
          required: true
          schema:
            $ref: "#/components/schemas/OobletID"
      responses:
        "200":
          description: Successful operation
          content:
            image/png:
              schema:
                type: string
                format: binary

  /items/all.json:
    get:
      tags:
        - items
      summary: List all Items in JSON
      description: >-
        Returns a list with the ids of all available Items in JSON format
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
  /items/all.yaml:
    get:
      tags:
        - items
      summary: List all Items in YAML
      description: >-
        Returns a list with the ids of all available Items in YAML format
      responses:
        "200":
          description: Successful operation
          content:
            text/x-yaml:
              schema:
                $ref: "#/components/schemas/ItemList"
  /items/{id}/data.json:
    get:
      tags:
        - items
      summary: Find Item data by ID in JSON
      description: Returns a single Item in JSON format
      parameters:
        - name: id
          in: path
          description: ID of the Item to return
          required: true
          schema:
            $ref: "#/components/schemas/ItemID"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
  /items/{id}/data.yaml:
    get:
      tags:
        - items
      summary: Find Item data by ID in YAML
      description: Returns a single Item in YAML format
      parameters:
        - name: id
          in: path
          description: ID of the Item to return
          required: true
          schema:
            $ref: "#/components/schemas/ItemID"
      responses:
        "200":
          description: Successful operation
          content:
            text/x-yaml:
              schema:
                $ref: "#/components/schemas/Item"
  /items/{id}/image.png:
    get:
      tags:
        - items
      summary: Find Item image by ID
      description: Returns an Item PNG image
      parameters:
        - name: id
          in: path
          description: ID of the Item to return
          required: true
          schema:
            $ref: "#/components/schemas/ItemID"
      responses:
        "200":
          description: Successful operation
          content:
            image/png:
              schema:
                type: string
                format: binary

  /locations/all.json:
    get:
      tags:
        - locations
      summary: List all Locations in JSON
      description: >-
        Returns a list with the ids of all available Locations in JSON format
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationList"
  /locations/all.yaml:
    get:
      tags:
        - locations
      summary: List all Locations in YAML
      description: >-
        Returns a list with the ids of all available Locations in YAML format
      responses:
        "200":
          description: Successful operation
          content:
            text/x-yaml:
              schema:
                $ref: "#/components/schemas/LocationList"
  /locations/{id}/data.json:
    get:
      tags:
        - locations
      summary: Find Location data by ID in JSON
      description: Returns a single Location in JSON format
      parameters:
        - name: id
          in: path
          description: ID of the Location to return
          required: true
          schema:
            $ref: "#/components/schemas/LocationID"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
  /locations/{id}/data.yaml:
    get:
      tags:
        - locations
      summary: Find Location data by ID in YAML
      description: Returns a single Location in YAML format
      parameters:
        - name: id
          in: path
          description: ID of the Location to return
          required: true
          schema:
            $ref: "#/components/schemas/LocationID"
      responses:
        "200":
          description: Successful operation
          content:
            text/x-yaml:
              schema:
                $ref: "#/components/schemas/Location"
  /locations/{id}/image.png:
    get:
      tags:
        - locations
      summary: Find Location image by ID
      description: Returns a Location PNG image
      parameters:
        - name: id
          in: path
          description: ID of the Location to return
          required: true
          schema:
            $ref: "#/components/schemas/LocationID"
      responses:
        "200":
          description: Successful operation
          content:
            image/png:
              schema:
                type: string
                format: binary

  /moves/all.json:
    get:
      tags:
        - moves
      summary: List all Moves in JSON
      description: >-
        Returns a list with the ids of all available Moves in JSON format
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MoveList"
  /moves/all.yaml:
    get:
      tags:
        - moves
      summary: List all Moves in YAML
      description: >-
        Returns a list with the ids of all available Moves in YAML format
      responses:
        "200":
          description: Successful operation
          content:
            text/x-yaml:
              schema:
                $ref: "#/components/schemas/MoveList"
  /moves/{id}/data.json:
    get:
      tags:
        - moves
      summary: Find Move data by ID in JSON
      description: Returns a single Move in JSON format
      parameters:
        - name: id
          in: path
          description: ID of the Move to return
          required: true
          schema:
            $ref: "#/components/schemas/MoveID"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Move"
  /moves/{id}/data.yaml:
    get:
      tags:
        - moves
      summary: Find Move data by ID in YAML
      description: Returns a single Move in YAML format
      parameters:
        - name: id
          in: path
          description: ID of the Move to return
          required: true
          schema:
            $ref: "#/components/schemas/MoveID"
      responses:
        "200":
          description: Successful operation
          content:
            text/x-yaml:
              schema:
                $ref: "#/components/schemas/Move"
  /moves/{id}/image.png:
    get:
      tags:
        - moves
      summary: Find Move image by ID
      description: Returns a Move PNG image
      parameters:
        - name: id
          in: path
          description: ID of the Move to return
          required: true
          schema:
            $ref: "#/components/schemas/MoveID"
      responses:
        "200":
          description: Successful operation
          content:
            image/png:
              schema:
                type: string
                format: binary

components:
  schemas:
    Ooblet:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/OobletID"
        name:
          $ref: "#/components/schemas/I18nString"
        quote:
          $ref: "#/components/schemas/I18nString"
        items:
          type: array
          items:
            $ref: "#/components/schemas/ItemWithQuantity"
        signatureMoves:
          type: array
          items:
            $ref: "#/components/schemas/MoveWithLevel"
      required:
        - id
        - name
        - quote
        - items
        - signatureMoves
      additionalProperties: false
    OobletID:
      type: string
      enum:
        - bibbin
        - hermble
    OobletList:
      type: array
      items:
        $ref: "#/components/schemas/OobletID"

    Item:
      oneOf:
        - $ref: "#/components/schemas/CookedFoodItem"
        - $ref: "#/components/schemas/ForageableItem"
        - $ref: "#/components/schemas/IngredientItem"
        - $ref: "#/components/schemas/RawCropItem"
      properties:
        name:
          $ref: "#/components/schemas/I18nString"
        description:
          $ref: "#/components/schemas/I18nString"
      required:
        - name
        - description
      additionalProperties: false
    CookedFoodItem:
      properties:
        id:
          $ref: "#/components/schemas/CookedFoodItemID"
        type:
          type: string
          enum:
            - "cooked_food"
        recipe:
          type: array
          items:
            $ref: "#/components/schemas/ItemWithQuantity"
      required:
        - id
        - type
        - recipe
      additionalProperties: false
    ForageableItem:
      properties:
        id:
          $ref: "#/components/schemas/ForageableItemID"
        type:
          type: string
          enum:
            - "forageable"
        location:
          $ref: "#/components/schemas/LocationID"
      required:
        - id
        - type
        - location
      additionalProperties: false
    IngredientItem:
      properties:
        id:
          $ref: "#/components/schemas/IngredientItemID"
        type:
          type: string
          enum:
            - "ingredient"
        recipe:
          type: array
          items:
            $ref: "#/components/schemas/ItemWithQuantity"
      required:
        - id
        - type
        - recipe
      additionalProperties: false
    RawCropItem:
      properties:
        id:
          $ref: "#/components/schemas/RawCropItemID"
        type:
          type: string
          enum:
            - "raw_crop"
        location:
          $ref: "#/components/schemas/LocationID"
      required:
        - id
        - type
        - location
      additionalProperties: false
    ItemID:
      type: string
      enum:
        - bread_sammy
        - buttonboy
        - froobtose
        - muz
        - muz_flour
        - rainplop
        - soggy_bread
        - sweetiebeetie
      oneOf:
        - $ref: "#/components/schemas/CookedFoodItemID"
        - $ref: "#/components/schemas/ForageableItemID"
        - $ref: "#/components/schemas/IngredientItemID"
        - $ref: "#/components/schemas/RawCropItemID"
    CookedFoodItemID:
      type: string
      enum:
        - bread_sammy
        - soggy_bread
    ForageableItemID:
      type: string
      enum:
        - buttonboy
        - rainplop
    IngredientItemID:
      type: string
      enum:
        - froobtose
        - muz_flour
    RawCropItemID:
      type: string
      enum:
        - muz
        - sweetiebeetie
    ItemWithQuantity:
      type: object
      properties:
        item:
          $ref: "#/components/schemas/ItemID"
        quantity:
          type: integer
          minimum: 1
      required:
        - item
        - quantity
      additionalProperties: false
    ItemList:
      type: array
      items:
        $ref: "#/components/schemas/ItemID"

    Location:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/LocationID"
        name:
          $ref: "#/components/schemas/I18nString"
        description:
          $ref: "#/components/schemas/I18nString"
        ooblets:
          $ref: "#/components/schemas/OobletList"
      required:
        - id
        - name
        - description
        - ooblets
      additionalProperties: false
    LocationID:
      type: string
      enum:
        - badgetown
        - mamoonia
    LocationList:
      type: array
      items:
        $ref: "#/components/schemas/LocationID"

    Move:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MoveID"
        name:
          $ref: "#/components/schemas/I18nString"
        description:
          $ref: "#/components/schemas/I18nString"
        cost:
          type: integer
          minimum: 0
      required:
        - id
        - name
        - description
        - cost
      additionalProperties: false
    MoveID:
      type: string
      enum:
        - bibbin_bop
        - drizzle_drop
        - extra_mild_salsa
        - flora_flip
        - hokeyokay
        - saturday_gigue
    MoveWithLevel:
      type: object
      properties:
        move:
          $ref: "#/components/schemas/MoveID"
        level:
          type: integer
          minimum: 1
      required:
        - move
        - level
      additionalProperties: false
    MoveList:
      type: array
      items:
        $ref: "#/components/schemas/MoveID"

    I18nString:
      type: object
      properties:
        default:
          type: string
      required:
        - default
      additionalProperties:
        type: string
